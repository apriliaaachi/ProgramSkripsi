/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package analisisentimen.boundary;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import analisisentimen.control.DocumentReader;
import analisisentimen.control.Evaluator;
import analisisentimen.control.HMMProb;
import analisisentimen.control.MNBClassifier;
import analisisentimen.control.MNBProbabilistik;
import analisisentimen.entity.Folds;
import analisisentimen.control.Viterbi;
import analisisentimen.control.Weighting;
import analisisentimen.entity.Tweet;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
//import postaggermnb.control.Normalisasi;
/**
 *
 * @author Asus
 */
public class MainForm extends javax.swing.JFrame {
    private static final HMMProb hmmProbab = new HMMProb();
    private String selectedFile;
    private DefaultTableModel modelBobot;  
    private DefaultTableModel model;
    private DocumentReader dr;
    private static Folds kFoldCV;
    private List<Tweet> tweetList;
    private int fold;
    private int limit=100;
    private List<Tweet> listTweet;
    
//    private static DocumentReader tweet = new DocumentReader();

    /** Creates new form MainFrame */
    public MainForm() {
        initComponents();
        prosesBtn.setEnabled(false);
        mnbRB.setEnabled(false);
        mnbPosRB.setEnabled(false);
        foldCombo.setEnabled(false);

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        klasifikasi = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        nameFile = new javax.swing.JTextField();
        loadBtn = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        mnbRB = new javax.swing.JRadioButton();
        mnbPosRB = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        precisionP = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        recallP = new javax.swing.JTextField();
        accuracyP = new javax.swing.JTextField();
        fMeasureP = new javax.swing.JTextField();
        recall = new javax.swing.JTextField();
        fMeasure = new javax.swing.JTextField();
        accuracy = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        precision = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        prosesBtn = new javax.swing.JButton();
        foldCombo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        limitCombo = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        klasifikasiTable2 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        klasifikasiTable1 = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        fp = new javax.swing.JTextField();
        fn = new javax.swing.JTextField();
        tp = new javax.swing.JTextField();
        tn = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        tpP = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        fpP = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        tnP = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        fnP = new javax.swing.JTextField();
        testExecTime = new javax.swing.JTextField();
        trainExecTime = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        trainPOSExecTime = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        testPOSExecTime = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nameFile.setEditable(false);
        nameFile.setPreferredSize(new java.awt.Dimension(94, 39));
        nameFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFileActionPerformed(evt);
            }
        });
        jPanel3.add(nameFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 19, 290, 30));

        loadBtn.setText("Load");
        loadBtn.setPreferredSize(new java.awt.Dimension(93, 39));
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });
        jPanel3.add(loadBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, 70, 30));

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonGroup1.add(mnbRB);
        mnbRB.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        mnbRB.setForeground(new java.awt.Color(51, 51, 51));
        mnbRB.setText("MNB");
        mnbRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnbRBActionPerformed(evt);
            }
        });
        jPanel6.add(mnbRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        buttonGroup1.add(mnbPosRB);
        mnbPosRB.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        mnbPosRB.setForeground(new java.awt.Color(51, 51, 51));
        mnbPosRB.setText("MNB (POS Tagging)");
        mnbPosRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnbPosRBActionPerformed(evt);
            }
        });
        jPanel6.add(mnbPosRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Klasifikasi");

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setPreferredSize(new java.awt.Dimension(216, 202));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        precisionP.setEditable(false);
        precisionP.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        precisionP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        precisionP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precisionPActionPerformed(evt);
            }
        });
        jPanel2.add(precisionP, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 55, 90, 31));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Recall");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 101, -1, 18));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("F-Measure");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Accurascy");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 175, -1, 31));

        recallP.setEditable(false);
        recallP.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        recallP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.add(recallP, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 95, 90, 31));

        accuracyP.setEditable(false);
        accuracyP.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        accuracyP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.add(accuracyP, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 175, 90, 31));

        fMeasureP.setEditable(false);
        fMeasureP.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        fMeasureP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.add(fMeasureP, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 135, 90, 31));

        recall.setEditable(false);
        recall.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        recall.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        recall.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        recall.setPreferredSize(new java.awt.Dimension(6, 26));
        jPanel2.add(recall, new org.netbeans.lib.awtextra.AbsoluteConstraints(131, 95, 90, 31));

        fMeasure.setEditable(false);
        fMeasure.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        fMeasure.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        fMeasure.setPreferredSize(new java.awt.Dimension(6, 26));
        jPanel2.add(fMeasure, new org.netbeans.lib.awtextra.AbsoluteConstraints(131, 135, 90, 31));

        accuracy.setEditable(false);
        accuracy.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        accuracy.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        accuracy.setPreferredSize(new java.awt.Dimension(6, 26));
        jPanel2.add(accuracy, new org.netbeans.lib.awtextra.AbsoluteConstraints(131, 175, 90, 31));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("MNB");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 19, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("MNB (POS Tagging)");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("Precision");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        precision.setEditable(false);
        precision.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        precision.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        precision.setPreferredSize(new java.awt.Dimension(6, 26));
        precision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precisionActionPerformed(evt);
            }
        });
        jPanel2.add(precision, new org.netbeans.lib.awtextra.AbsoluteConstraints(131, 55, 90, 31));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Evaluasi");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Dataset");

        prosesBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        prosesBtn.setText("Proses");
        prosesBtn.setPreferredSize(new java.awt.Dimension(65, 29));
        prosesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prosesBtnActionPerformed(evt);
            }
        });

        foldCombo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        foldCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fold 1", "Fold 2", "Fold 3", "Fold 4", "Fold 5", "Fold 6", "Fold 7", "Fold 8", "Fold 9", "Fold 10" }));
        foldCombo.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                foldComboAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        foldCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foldComboActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("Limit");

        limitCombo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        limitCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "100", "200", "300", "400", "500", "538" }));
        limitCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limitComboActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setText("Folds");

        javax.swing.GroupLayout klasifikasiLayout = new javax.swing.GroupLayout(klasifikasi);
        klasifikasi.setLayout(klasifikasiLayout);
        klasifikasiLayout.setHorizontalGroup(
            klasifikasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(klasifikasiLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(klasifikasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(klasifikasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(prosesBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(klasifikasiLayout.createSequentialGroup()
                        .addGroup(klasifikasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(foldCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(166, 166, 166)
                        .addGroup(klasifikasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(limitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        klasifikasiLayout.setVerticalGroup(
            klasifikasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(klasifikasiLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(klasifikasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(klasifikasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(foldCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limitCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(prosesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Hasil Pengujian MNB");

        klasifikasiTable2.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        klasifikasiTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(klasifikasiTable2);

        klasifikasiTable1.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        klasifikasiTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(klasifikasiTable1);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Hasil Pengujian MNB (POS Tagging)");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jLabel17.setText("Training Exec. Time :");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jLabel19.setText("Testing Exec. Time  :");

        fp.setEditable(false);
        fp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fp.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        fp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpActionPerformed(evt);
            }
        });

        fn.setEditable(false);
        fn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        fn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnActionPerformed(evt);
            }
        });

        tp.setEditable(false);
        tp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tp.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tpActionPerformed(evt);
            }
        });

        tn.setEditable(false);
        tn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tnActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel18.setText("TP");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel22.setText("TN");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel23.setText("FP");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel24.setText("FN");

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel25.setText("TP");

        tpP.setEditable(false);
        tpP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tpP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tpP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tpPActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel26.setText("FP");

        fpP.setEditable(false);
        fpP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fpP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        fpP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpPActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel27.setText("TN");

        tnP.setEditable(false);
        tnP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tnP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tnP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tnPActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel28.setText("FN");

        fnP.setEditable(false);
        fnP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fnP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        fnP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnPActionPerformed(evt);
            }
        });

        testExecTime.setEditable(false);
        testExecTime.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        testExecTime.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        testExecTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testExecTimeActionPerformed(evt);
            }
        });

        trainExecTime.setEditable(false);
        trainExecTime.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        trainExecTime.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        trainExecTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainExecTimeActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jLabel29.setText("Training Exec. Time :");

        trainPOSExecTime.setEditable(false);
        trainPOSExecTime.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        trainPOSExecTime.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        trainPOSExecTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainPOSExecTimeActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jLabel30.setText("Testing Exec. Time  :");

        testPOSExecTime.setEditable(false);
        testPOSExecTime.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        testPOSExecTime.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        testPOSExecTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testPOSExecTimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel18)
                        .addGap(158, 158, 158)
                        .addComponent(jLabel23)
                        .addGap(157, 157, 157)
                        .addComponent(jLabel22)
                        .addGap(163, 163, 163)
                        .addComponent(jLabel24)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(tp, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91)
                                .addComponent(fp, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84)
                                .addComponent(tn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel15)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane5)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel25))
                                    .addComponent(tpP, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(88, 88, 88)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(fpP, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tnP, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(88, 88, 88)
                                        .addComponent(fnP, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addComponent(jLabel26)
                                        .addGap(166, 166, 166)
                                        .addComponent(jLabel27)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel28)
                                        .addGap(36, 36, 36)))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(trainExecTime)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(testExecTime)
                                    .addComponent(trainPOSExecTime)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(testPOSExecTime, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(8, 8, 8)
                        .addComponent(trainExecTime, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testExecTime, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(jLabel23)
                    .addComponent(jLabel22)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tp, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fp, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addGap(8, 8, 8)
                        .addComponent(trainPOSExecTime, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testPOSExecTime, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel28)
                        .addComponent(jLabel27))
                    .addComponent(jLabel26)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fpP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tpP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fnP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tnP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55))
        );

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));

        jLabel5.setText("Copyright © 2019 by");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Achi Aprilia A");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(558, 558, 558)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel14))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(klasifikasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(klasifikasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFileActionPerformed

    private void mnbRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnbRBActionPerformed
                    // TODO add your handling code here:
        foldCombo.setEnabled(true);
        limitCombo.setEnabled(true);
        prosesBtn.setEnabled(true);
    }//GEN-LAST:event_mnbRBActionPerformed
    
    private void doProsesWithoutPOSTag () throws IOException {
        double trainingElapsedTime = 0.0;
        double testElapsedTime = 0.0;
        double[] priorProbability;
        double[][] conditionalProbability;
        int folds = kFoldCV.getFolds();

        System.out.format("Fold: %s", fold + 1 + " " + "MNB");
        System.out.println();
         
//        Proses Training Usecase ke-5        
        double trainingStartTime = System.currentTimeMillis();
        listTweet = kFoldCV.getListTweetLimit(limit, tweetList);
        List<Tweet> trainingSet = kFoldCV.getTrainingSet(fold, listTweet);
        Weighting weight = new Weighting(trainingSet);
        weight.prepareCountWeight();
        weight.doWeighting();
        
        MNBProbabilistik mnbp = new MNBProbabilistik(weight);
        priorProbability = mnbp.calculatePriorProbability();
        
//         for (int k = 0; k < priorProbability.length; k++) {
//             System.out.println(priorProbability[k] + " ");
//         }
        
        
        conditionalProbability = mnbp.calculateConditionalProbability();
//        System.out.println("Conditional Probability");
//         for (int i = 0; i < conditionalProbability.length; i++) {
//             for (int j = 0; j < conditionalProbability[0].length; j++) {
//                 System.out.println(conditionalProbability[i][j] + " ");
//             }
//             System.out.println("");
//         }

        trainingElapsedTime += System.currentTimeMillis() - trainingStartTime;
          
//        Proses Testing Usecase ke-6
        double testStartTime = System.currentTimeMillis();
        List<Tweet> testingSet = kFoldCV.getTestSet(fold, listTweet);
        MNBClassifier mnbc = new MNBClassifier(testingSet,priorProbability,conditionalProbability,weight);
        mnbc.prepareToClassify(); 
                
        int[] classify = mnbc.classifyFull();
//        System.out.println("Hasil Klasifikasi");
//        for (int i = 0; i < mnbc.classifyFul().length; i++) {
//             for (int j = 0; j < mnbc.classifyFul()[i].length; j++) {
//                 System.out.print(mnbc.classifyFul()[i][j] + " ");
//             }
//             System.out.println("");
//         }
//         
//
//         for (int i = 0; i < classify.length; i++) {
//             System.out.println("Data Testing " + i + ": " + classify[i]);
//         }
        
        testElapsedTime += System.currentTimeMillis() - testStartTime;
        Evaluator evaluator = new Evaluator(classify, mnbc);
              
        System.out.format("Total time to train (in seconds): %s\n", trainingElapsedTime / 1000d);
        System.out.format("Total time to test (in seconds): %s\n", testElapsedTime / 1000d);
        System.out.println();
        
        loadData(testingSet, classify);
        
        trainExecTime.setText("" + trainingElapsedTime / 1000d);
        testExecTime.setText("" + testElapsedTime / 1000d);
         
        tp.setText("" + evaluator.getTruePositive());
        fp.setText("" + evaluator.getFalsePositive());
        tn.setText("" + evaluator.getTrueNegative());
        fn.setText("" + evaluator.getFalseNegative());
        
        precision.setText("" + evaluator.getPrecision());
        recall.setText("" + evaluator.getRecall());
        fMeasure.setText("" + evaluator.getFMeasure());
        accuracy.setText("" + evaluator.getAccuracy());
   
    }
    
     private void doProsesWithPOSTag () throws IOException {
        
        double trainingElapsedTime = 0.0;
        double testElapsedTime = 0.0;
        int folds = kFoldCV.getFolds();
        double[] priorProbability;
        double[][] conditionalProbability;
        System.out.format("Number of folds: %s\n\n", folds);

        System.out.format("Fold: %s", fold + 1 + " " + "MNB(POS Tagging)");
        System.out.println();
        
//        Proses Training Usecase ke-2
        double trainingStartTime = System.currentTimeMillis();
        listTweet = kFoldCV.getListTweetLimit(limit, tweetList);
        List<Tweet> trainingSet = kFoldCV.getTrainingSet(fold, listTweet);
        
        Weighting weight = new Weighting(trainingSet);
        weight.prepareCountWeightPOS();
        weight.doWeightingPOS();
        
        
        MNBProbabilistik mnbp = new MNBProbabilistik(weight);
        priorProbability = mnbp.calculatePriorProbability();
//         for (int k = 0; k < priorProbability.length; k++) {
//             System.out.println(priorProbability[k]);
//         }
        
        conditionalProbability = mnbp.calculateConditionalProbability();
//         System.out.println("Conditional");
//         for (int i = 0; i < conditionalProbability.length; i++) {
//             for (int j = 0; j < conditionalProbability[0].length; j++) {
//                 System.out.println(conditionalProbability[i][j] + " ");
//             }
//             System.out.println("");
//         }
        
        trainingElapsedTime += System.currentTimeMillis() - trainingStartTime;
         
//         System.out.println("=====================================");
        
//        Proses Testing Usecase ke-3
        double testStartTime = System.currentTimeMillis();
        List<Tweet> testingSet = kFoldCV.getTestSet(fold, listTweet);
        MNBClassifier mnbc = new MNBClassifier(testingSet,priorProbability,conditionalProbability,weight);
        mnbc.prepareToClassifyWithPOS();
        int[] classify = mnbc.classifyFull();
//         System.out.println("Hasil Klasifikasi");
//         for (int i = 0; i < mnbc.classifyFul().length; i++) {
//             for (int j = 0; j < mnbc.classifyFul()[i].length; j++) {
//                 System.out.print(mnbc.classifyFul()[i][j] + " ");
//             }
//             System.out.println("");
//         }
//        
//         for (int i = 0; i < classify.length; i++) {
//             System.out.println("Data Testing " + i + ": " + classify[i]);
//         }
        
        testElapsedTime += System.currentTimeMillis() - testStartTime;
        Evaluator evaluator = new Evaluator(classify, mnbc);
                
        System.out.format("Total time to train (in seconds): %s\n", trainingElapsedTime / 1000d);
        System.out.format("Total time to test (in seconds): %s\n", testElapsedTime / 1000d);
        System.out.println();
        
        loadData(testingSet, classify);
        
        trainPOSExecTime.setText("" + trainingElapsedTime / 1000d);
        testPOSExecTime.setText("" + testElapsedTime / 1000d);
            
        tpP.setText("" + evaluator.getTruePositive());
        fpP.setText("" + evaluator.getFalsePositive());
        tnP.setText("" + evaluator.getTrueNegative());
        fnP.setText("" + evaluator.getFalseNegative());
        
        precisionP.setText("" + evaluator.getPrecision());
        recallP.setText("" + evaluator.getRecall());
        fMeasureP.setText("" + evaluator.getFMeasure());
        accuracyP.setText("" + evaluator.getAccuracy());    
        
        
            
    }
     
    private void loadData(List<Tweet> data, int[] outClass){
        
        model = new DefaultTableModel();
        
        if(mnbRB.isSelected()){
            klasifikasiTable1.setModel(model);
            
        } else if(mnbPosRB.isSelected()) {
            klasifikasiTable2.setModel(model);
        }
        
        model.addColumn("Id");
        model.addColumn("Content Tweet");
        model.addColumn("Class Sentiment");
        model.addColumn("Output Class");
        
        klasifikasiTable1.setAutoResizeMode(klasifikasiTable1.AUTO_RESIZE_OFF);
        klasifikasiTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
        klasifikasiTable1.getColumnModel().getColumn(1).setPreferredWidth(470);
        klasifikasiTable1.getColumnModel().getColumn(2).setPreferredWidth(60);
        klasifikasiTable1.getColumnModel().getColumn(3).setPreferredWidth(60);
        klasifikasiTable1.setRowHeight(26);
        
        klasifikasiTable2.setAutoResizeMode(klasifikasiTable1.AUTO_RESIZE_OFF);
        klasifikasiTable2.getColumnModel().getColumn(0).setPreferredWidth(30);
        klasifikasiTable2.getColumnModel().getColumn(1).setPreferredWidth(470);
        klasifikasiTable2.getColumnModel().getColumn(2).setPreferredWidth(60);
        klasifikasiTable2.getColumnModel().getColumn(3).setPreferredWidth(60);
        klasifikasiTable2.setRowHeight(26);
 
        for (int j = 0; j < data.size(); j++) {
            Vector<Integer> id = new Vector<>(Arrays.asList(j));
            Vector<String> contentTweet = new Vector<>(Arrays.asList(data.get(j).getContentTweet()));
            Vector<Integer> classSentiment = new Vector<>(Arrays.asList(data.get(j).getClassSentiment()));
            Vector<Integer> outputClass = new Vector<>(Arrays.asList(outClass[j]));
        
            Vector<Object> row = new Vector<Object>();
            row.addElement(id.get(0));
            row.addElement(contentTweet.get(0));
            row.addElement(classSentiment.get(0));
            row.addElement(outputClass.get(0));
            model.addRow(row);
        }
        
        
    }
    
    private void precisionPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precisionPActionPerformed
        // TODO add your handling code here:)
    }//GEN-LAST:event_precisionPActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        // TODO add your handling code here:
                
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Pilih File");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        chooser.setFileFilter(filter);
        
        if (chooser.showOpenDialog(null)==JFileChooser.APPROVE_OPTION){
            try{
                selectedFile = String.valueOf(chooser.getSelectedFile());
                nameFile.setText(selectedFile);
                System.out.println("Selected File: " + selectedFile);
                dr = new DocumentReader(selectedFile);
                try {
                    dr.readTweetSet();
                } catch (IOException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                tweetList = dr.getTweetList();
                
                kFoldCV = new Folds(10, tweetList);
                kFoldCV.shuffle(new Random(), tweetList);
                
                
       
            } catch (NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "format file not .txt", "Failed", JOptionPane.ERROR_MESSAGE);
            }  
        } else {
                System.out.println("Failed");

        }
        
        mnbRB.setEnabled(true);
        mnbPosRB.setEnabled(true);
        
    }//GEN-LAST:event_loadBtnActionPerformed

    private void mnbPosRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnbPosRBActionPerformed
        // TODO add your handling code here:
        foldCombo.setEnabled(true);
        prosesBtn.setEnabled(true);
        limitCombo.setEnabled(true);
         
    }//GEN-LAST:event_mnbPosRBActionPerformed

    private void fpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fpActionPerformed

    private void prosesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prosesBtnActionPerformed
 
        if(mnbRB.isSelected()) {
            try {
                klasifikasiTable1.setModel(new DefaultTableModel());
                doProsesWithoutPOSTag();
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else if(mnbPosRB.isSelected()) {
            
            try {
                klasifikasiTable2.setModel(new DefaultTableModel());
                doProsesWithPOSTag();
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_prosesBtnActionPerformed

    private void foldComboAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_foldComboAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_foldComboAncestorAdded

    private void foldComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foldComboActionPerformed
        // TODO add your handling code here:
        if(foldCombo.getSelectedItem() == "Fold 1"){
            fold = 0;
        } else if(foldCombo.getSelectedItem() == "Fold 2") {
            fold = 1;
        } else if(foldCombo.getSelectedItem() == "Fold 3") {
            fold = 2;
        } else if(foldCombo.getSelectedItem() == "Fold 4") {
            fold = 3;
        } else if(foldCombo.getSelectedItem() == "Fold 5") {
            fold = 4;
        } else if(foldCombo.getSelectedItem() == "Fold 6") {
            fold = 5;
        } else if(foldCombo.getSelectedItem() == "Fold 7") {
            fold = 6;
        } else if(foldCombo.getSelectedItem() == "Fold 8") {
            fold = 7;
        } else if(foldCombo.getSelectedItem() == "Fold 9") {
            fold = 8;
        } else if(foldCombo.getSelectedItem() == "Fold 10") {
            fold = 9;
        }
        
    }//GEN-LAST:event_foldComboActionPerformed

    private void precisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precisionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_precisionActionPerformed

    private void fnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnActionPerformed

    private void tpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tpActionPerformed

    private void tnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tnActionPerformed

    private void tpPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tpPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tpPActionPerformed

    private void fpPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fpPActionPerformed

    private void tnPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tnPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tnPActionPerformed

    private void fnPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnPActionPerformed

    private void testExecTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testExecTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_testExecTimeActionPerformed

    private void trainExecTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainExecTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trainExecTimeActionPerformed

    private void trainPOSExecTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainPOSExecTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trainPOSExecTimeActionPerformed

    private void testPOSExecTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testPOSExecTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_testPOSExecTimeActionPerformed

    private void limitComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limitComboActionPerformed
        // TODO add your handling code here:
        
        if(limitCombo.getSelectedItem() == "100"){
            
            limit = 100;
        } else if(limitCombo.getSelectedItem() == "200"){
            
            limit=200;
        } else if(limitCombo.getSelectedItem() == "300"){
            
            limit=300;
        } else if(limitCombo.getSelectedItem() == "400"){
            
            limit=400;
        } else if(limitCombo.getSelectedItem() == "500"){
            
            limit=500;
        } else if(limitCombo.getSelectedItem() == "538"){
            
            limit=538;
        }
    }//GEN-LAST:event_limitComboActionPerformed
    
    private void loadBobot(int hasilPembobotan[][]){
        int baris = hasilPembobotan.length;
        int kolom = hasilPembobotan[0].length;
        modelBobot = (DefaultTableModel) klasifikasiTable1.getModel();
        modelBobot.setColumnCount(kolom);
        
        for (int i = 0; i < baris; i++) {
            String row[] = new String[kolom];
            for (int j = 0; j < kolom; j++) {
                row[j] = String.valueOf(hasilPembobotan[i][j]);
            }
            modelBobot.addRow(row);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accuracy;
    private javax.swing.JTextField accuracyP;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField fMeasure;
    private javax.swing.JTextField fMeasureP;
    private javax.swing.JTextField fn;
    private javax.swing.JTextField fnP;
    private javax.swing.JComboBox<String> foldCombo;
    private javax.swing.JTextField fp;
    private javax.swing.JTextField fpP;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel klasifikasi;
    private javax.swing.JTable klasifikasiTable1;
    private javax.swing.JTable klasifikasiTable2;
    private javax.swing.JComboBox<String> limitCombo;
    private javax.swing.JButton loadBtn;
    private javax.swing.JRadioButton mnbPosRB;
    private javax.swing.JRadioButton mnbRB;
    private javax.swing.JTextField nameFile;
    private javax.swing.JTextField precision;
    private javax.swing.JTextField precisionP;
    private javax.swing.JButton prosesBtn;
    private javax.swing.JTextField recall;
    private javax.swing.JTextField recallP;
    private javax.swing.JTextField testExecTime;
    private javax.swing.JTextField testPOSExecTime;
    private javax.swing.JTextField tn;
    private javax.swing.JTextField tnP;
    private javax.swing.JTextField tp;
    private javax.swing.JTextField tpP;
    private javax.swing.JTextField trainExecTime;
    private javax.swing.JTextField trainPOSExecTime;
    // End of variables declaration//GEN-END:variables

}
